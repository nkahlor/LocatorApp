//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LocatorApp.Webstrar25ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Webstrar25ServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WeatherService", ReplyAction="http://tempuri.org/IService1/WeatherServiceResponse")]
        string[] WeatherService(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/WeatherService", ReplyAction="http://tempuri.org/IService1/WeatherServiceResponse")]
        System.Threading.Tasks.Task<string[]> WeatherServiceAsync(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CrimeIndexService", ReplyAction="http://tempuri.org/IService1/CrimeIndexServiceResponse")]
        double CrimeIndexService(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CrimeIndexService", ReplyAction="http://tempuri.org/IService1/CrimeIndexServiceResponse")]
        System.Threading.Tasks.Task<double> CrimeIndexServiceAsync(string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestStore", ReplyAction="http://tempuri.org/IService1/FindNearestStoreResponse")]
        string FindNearestStore(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FindNearestStore", ReplyAction="http://tempuri.org/IService1/FindNearestStoreResponse")]
        System.Threading.Tasks.Task<string> FindNearestStoreAsync(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromZip", ReplyAction="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromZipResponse")]
        string GetLatLonSeperatedBySpaceFromZip(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromZip", ReplyAction="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromZipResponse")]
        System.Threading.Tasks.Task<string> GetLatLonSeperatedBySpaceFromZipAsync(string zipCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromCityAndState", ReplyAction="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromCityAndStateResponse")]
        string GetLatLonSeperatedBySpaceFromCityAndState(string city, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromCityAndState", ReplyAction="http://tempuri.org/IService1/GetLatLonSeperatedBySpaceFromCityAndStateResponse")]
        System.Threading.Tasks.Task<string> GetLatLonSeperatedBySpaceFromCityAndStateAsync(string city, string state);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityStateSeperatedBySpaceFromLatLon", ReplyAction="http://tempuri.org/IService1/GetCityStateSeperatedBySpaceFromLatLonResponse")]
        string GetCityStateSeperatedBySpaceFromLatLon(string lat, string lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityStateSeperatedBySpaceFromLatLon", ReplyAction="http://tempuri.org/IService1/GetCityStateSeperatedBySpaceFromLatLonResponse")]
        System.Threading.Tasks.Task<string> GetCityStateSeperatedBySpaceFromLatLonAsync(string lat, string lon);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TempConverter", ReplyAction="http://tempuri.org/IService1/TempConverterResponse")]
        double TempConverter(double temp, bool cvtToCel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TempConverter", ReplyAction="http://tempuri.org/IService1/TempConverterResponse")]
        System.Threading.Tasks.Task<double> TempConverterAsync(double temp, bool cvtToCel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SortStatesByCrimeRates", ReplyAction="http://tempuri.org/IService1/SortStatesByCrimeRatesResponse")]
        string[] SortStatesByCrimeRates();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SortStatesByCrimeRates", ReplyAction="http://tempuri.org/IService1/SortStatesByCrimeRatesResponse")]
        System.Threading.Tasks.Task<string[]> SortStatesByCrimeRatesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : LocatorApp.Webstrar25ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<LocatorApp.Webstrar25ServiceReference.IService1>, LocatorApp.Webstrar25ServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] WeatherService(string zipcode) {
            return base.Channel.WeatherService(zipcode);
        }
        
        public System.Threading.Tasks.Task<string[]> WeatherServiceAsync(string zipcode) {
            return base.Channel.WeatherServiceAsync(zipcode);
        }
        
        public double CrimeIndexService(string state) {
            return base.Channel.CrimeIndexService(state);
        }
        
        public System.Threading.Tasks.Task<double> CrimeIndexServiceAsync(string state) {
            return base.Channel.CrimeIndexServiceAsync(state);
        }
        
        public string FindNearestStore(string zipCode) {
            return base.Channel.FindNearestStore(zipCode);
        }
        
        public System.Threading.Tasks.Task<string> FindNearestStoreAsync(string zipCode) {
            return base.Channel.FindNearestStoreAsync(zipCode);
        }
        
        public string GetLatLonSeperatedBySpaceFromZip(string zipCode) {
            return base.Channel.GetLatLonSeperatedBySpaceFromZip(zipCode);
        }
        
        public System.Threading.Tasks.Task<string> GetLatLonSeperatedBySpaceFromZipAsync(string zipCode) {
            return base.Channel.GetLatLonSeperatedBySpaceFromZipAsync(zipCode);
        }
        
        public string GetLatLonSeperatedBySpaceFromCityAndState(string city, string state) {
            return base.Channel.GetLatLonSeperatedBySpaceFromCityAndState(city, state);
        }
        
        public System.Threading.Tasks.Task<string> GetLatLonSeperatedBySpaceFromCityAndStateAsync(string city, string state) {
            return base.Channel.GetLatLonSeperatedBySpaceFromCityAndStateAsync(city, state);
        }
        
        public string GetCityStateSeperatedBySpaceFromLatLon(string lat, string lon) {
            return base.Channel.GetCityStateSeperatedBySpaceFromLatLon(lat, lon);
        }
        
        public System.Threading.Tasks.Task<string> GetCityStateSeperatedBySpaceFromLatLonAsync(string lat, string lon) {
            return base.Channel.GetCityStateSeperatedBySpaceFromLatLonAsync(lat, lon);
        }
        
        public double TempConverter(double temp, bool cvtToCel) {
            return base.Channel.TempConverter(temp, cvtToCel);
        }
        
        public System.Threading.Tasks.Task<double> TempConverterAsync(double temp, bool cvtToCel) {
            return base.Channel.TempConverterAsync(temp, cvtToCel);
        }
        
        public string[] SortStatesByCrimeRates() {
            return base.Channel.SortStatesByCrimeRates();
        }
        
        public System.Threading.Tasks.Task<string[]> SortStatesByCrimeRatesAsync() {
            return base.Channel.SortStatesByCrimeRatesAsync();
        }
    }
}
